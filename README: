README:




SPREADSHEET NOTES:

1. Cadidate Data input notes:

PARTY: Democrat/Republican should be capatalized
WEBSITE: xxx.com (no http://www.)
TWITTER: @XXX
FACEBOOK: facebook.com/xxx (no http://www.)
BIO:  Wrap all paragraphs in <p></p>. MUST be one long string with no returns
BACKGROUND:  Wrap all paragraphs in <p></p>. MUST be one long string with no returns


2. Questionaires

* Question answers for small race candidates (congress / city council) are included on the main candidate spreadsheet for that race
* Question answers for large race candidates (mayor / senate) are on seperate spreadsheets. (purely technical reason)
* Each race has a question key tab in the spreadsheet for cross refrencing purposes

For big race questionaires (mayor / senate)
	- Entries must be one long string
	- It is ok if some p2 fields are blank
	- If a p2 entry has more that one paragraph, need to wrap all graphs in  <p></p>
	- p1 entires should not be wrapped in <p>

For small race questionaires (council / congress)
	- Wrap all paragraphs in <p></p>. MUST be one long string with no returns




JSON IMPORTING NOTES:

Use Mr Data Converter to convert spreadsheet to JSON or http://www.convertcsv.com/csv-to-json.htm

Add JSON to appropriate js file
* Small race and Big race JSON objects are formatted slightly differently. Follow pre-set format when pasting into js file





FUNCTION NOTES:

Incudes: I use Jquery load() to pull in the footer and tophat from html files in the root. The script itself is found on each page near where the JSON functions are called.

The smaller race pages (congress / city council) are poulated through the function populateData(data) in javascript.js

	- It parses a JSON object called into the page seperatly (city-council-candidate-data.js for example).
	- It loops through the JSON object and places democrats and republicans in their assigned spot on the page
	- The function is then called on the race page and the json object it sould parse is passed: populateData(CouncilPresidentdata);
	- A dynmaic navigation lets users switch between races on page. A button re-calls the populateData() function and passes a different  district's JSON object to parse.


The candidate pages for larger races (mayoral / senate ) are populated through a few functions:
	
	1. app.toggle_fixed_nav() is called at the top of candidate pages, function is in javascript.js
		Tells at what points to show / hide drop down nav

	2. init:function() pulls together a bunch of smaller functions related to questionaire. It is called on load at the bottom of javascript.js. Really only applies to candidate pages

	3. app.load_all_answers("dixon") is called at the bottom of a candidate page. The function itself is in javascript.js. It pulls together several functions but mostly populates the canadidate question answers based on json file called at top of file.

	4.  app.load_candidate_data(dixonData); populates the candidate data based on a json file called at top. Function itself is in javascript.js

	*5. Senate uses two slightly different functions than those above: load_all_answers_senate, share_answer_senate

	6. There are two JSON files called at the top that function as a database for these pages. One json file for data, one for the queston answers. Different races have different json files.

	7. Several functions in javascript.js control the question answer sharing. Need to be customized depending on the race, candidate and questions.




